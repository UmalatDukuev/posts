package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"log"
	"posts/graph/model"
	"posts/utils"
	"time"
)

func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	log.Println("Создание нового поста...")

	post := &model.Post{
		Title:       input.Title,
		Content:     input.Content,
		Author:      utils.GetStringValue(input.Author),
		PublishedAt: utils.GetStringValue(input.PublishedAt),
		// UpdatedAt:       utils.GetStringValue(input.UpdatedAt), //"utils.GetStringValue(input.UpdatedAt)",
		Comments:        []*model.Comment{},
		CommentsAllowed: true,
	}

	if post.PublishedAt == "" {
		post.PublishedAt = time.Now().Format(time.RFC3339)
	}

	if err := r.Database.Create(post).Error; err != nil {
		log.Printf("Ошибка при создании поста: %v", err)
		return nil, err
	}

	log.Printf("Пост успешно создан: %+v", post)
	return post, nil
}

func (r *mutationResolver) UpdatePost(ctx context.Context, postID int32, input *model.NewPost) (*model.Post, error) {
	log.Printf("Обновление поста с ID: %d", postID)

	var post model.Post
	if err := r.Database.First(&post, postID).Error; err != nil {
		log.Printf("Ошибка при поиске поста: %v", err)
		return nil, err
	}

	if input.Title != "" {
		post.Title = input.Title
	}
	if input.Content != "" {
		post.Content = input.Content
	}
	if input.Author != nil {
		post.Author = *input.Author
	}
	updatedAt := time.Now().Format(time.RFC3339)
	post.UpdatedAt = &updatedAt

	if err := r.Database.Save(&post).Error; err != nil {
		log.Printf("Ошибка при обновлении поста: %v", err)
		return nil, err
	}

	log.Printf("Пост успешно обновлен: %+v", post)
	return &post, nil
}

func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	log.Println("Создание нового комментария...")

	if len(input.Content) > 2000 {
		return nil, fmt.Errorf("длина комментария превышает 2000 символов")
	}

	var post model.Post
	if err := r.Database.First(&post, input.PostID).Error; err != nil {
		log.Printf("Ошибка при получении поста: %v", err)
		return nil, fmt.Errorf("пост с ID %d не найден", input.PostID)
	}

	if !post.CommentsAllowed {
		log.Printf("Комментарии к посту с ID %d запрещены", input.PostID)
		return nil, fmt.Errorf("комментарии к этому посту отключены")
	}

	comment := &model.Comment{
		PostID:    input.PostID,
		Author:    input.Author,
		Content:   input.Content,
		ParentID:  input.ParentID,
		CreatedAt: time.Now().Format(time.RFC3339),
	}

	if err := r.Database.Create(comment).Error; err != nil {
		log.Printf("Ошибка при создании комментария: %v", err)
		return nil, err
	}

	log.Printf("Комментарий успешно создан: %+v", comment)
	return comment, nil
}

func (r *queryResolver) GetAllPosts(ctx context.Context) ([]*model.Post, error) {
	log.Println("Получение всех постов...")

	var posts []*model.Post
	if err := r.Database.Find(&posts).Error; err != nil {
		log.Printf("Ошибка при получении постов: %v", err)
		return nil, err
	}

	log.Printf("Найдено %d постов", len(posts))
	return posts, nil
}

func (r *queryResolver) GetOnePost(ctx context.Context, id int32) (*model.Post, error) {
	log.Printf("Получение поста с ID: %d", id)

	var post model.Post
	if err := r.Database.First(&post, id).Error; err != nil {
		log.Printf("Ошибка при получении поста: %v", err)
		return nil, err
	}

	log.Printf("Пост найден: %+v", post)
	return &post, nil
}

func (r *queryResolver) GetCommentsByPost(ctx context.Context, postID int32, limit *int32, offset *int32) ([]*model.Comment, error) {
	log.Printf("Получение комментариев для поста ID: %d", postID)

	var comments []*model.Comment
	query := r.Database.Where("post_id = ?", postID)

	if limit != nil {
		query = query.Limit(int(*limit))
	}
	if offset != nil {
		query = query.Offset(int(*offset))
	}

	if err := query.Find(&comments).Error; err != nil {
		log.Printf("Ошибка при получении комментариев: %v", err)
		return nil, err
	}

	log.Printf("Найдено %d комментариев", len(comments))
	return comments, nil
}

// NewCommentAdded is the resolver for the NewCommentAdded field.
func (r *subscriptionResolver) NewCommentAdded(ctx context.Context, postID int32) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: NewCommentAdded - NewCommentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
