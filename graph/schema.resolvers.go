package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"log"
	"posts/graph/model"
	"posts/utils"
	"time"
)

func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	log.Println("Создание нового поста...")

	post := &model.Post{
		Title:       input.Title,
		Content:     input.Content,
		Author:      utils.GetStringValue(input.Author),
		PublishedAt: utils.GetStringValue(input.PublishedAt),
		// UpdatedAt:       "utils.GetStringValue(input.UpdatedAt)",
		Comments:        []*model.Comment{},
		CommentsAllowed: true,
	}

	if post.PublishedAt == "" {
		post.PublishedAt = time.Now().Format(time.RFC3339)
	}

	if err := r.Database.Create(post).Error; err != nil {
		log.Printf("Ошибка при создании поста: %v", err)
		return nil, err
	}

	log.Printf("Пост успешно создан: %+v", post)
	return post, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID int32, input *model.NewPost) (*model.Post, error) {
	var post model.Post

	return &post, nil
}

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - CreateComment"))
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post

	return posts, nil
}

// GetOnePost is the resolver for the GetOnePost field.
func (r *queryResolver) GetOnePost(ctx context.Context, id int32) (*model.Post, error) {
	var post model.Post

	return &post, nil
}

// GetCommentsByPost is the resolver for the GetCommentsByPost field.
func (r *queryResolver) GetCommentsByPost(ctx context.Context, postID int32, limit *int32, offset *int32) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: GetCommentsByPost - GetCommentsByPost"))
}

// NewCommentAdded is the resolver for the NewCommentAdded field.
func (r *subscriptionResolver) NewCommentAdded(ctx context.Context, postID int32) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: NewCommentAdded - NewCommentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
